#lang pie
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Some examples and exercises from the Little Typer

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; eliminate all the Nats

(claim  step-+ (-> Nat Nat))
(define step-+
  (λ (n-1)
    (add1 n-1)))

(claim  + (-> Nat Nat Nat))
(define +
  (λ (n m)
    (iter-Nat n
      m
      step-+)))

(claim  step-gauss (-> Nat Nat Nat))
(define step-gauss
  (λ (n-1 gauss-n-1)
    (+ (add1 n-1) gauss-n-1)))

(claim  gauss (-> Nat Nat))
(define gauss
  (λ (n)
    (rec-Nat n
      0
      step-gauss)))


(claim  step-* (-> Nat Nat Nat Nat))
(define step-*
  (λ (m)
    (λ (n-1 *-n-1)
      (+ m *-n-1))))

(claim  * (-> Nat Nat Nat))
(define *
  (λ (n m)
    (rec-Nat n
      0
      (step-* m))))

;; factorial function
(claim  step-fac (-> Nat Nat Nat))
(define step-fac
  (λ (n-1 fac-1)
    (* (add1 n-1) fac-1)))

(claim fac (-> Nat Nat))
(define fac
  (λ (n)
    (rec-Nat n
      1
      step-fac)))
       
;; Takes the type of each of the pair 
(claim  flip-Pair
  (Π ((A U)
      (D U))
    (→ (Pair A D)
      (Pair D A))))
(define flip-Pair
  (λ (A D)
    (λ (p)
      (cons (cdr p) (car p)))))

;;; Eliminator for Pair
(claim elim-Pair
  (Π ((A U)            ; type of fst
      (D U)            ; type of snd
      (X U))           ; type of result
    (→ (Pair A D)      ; Pair : (A, D)
      (→ A D X)        ; f : A → D → X
      X)))             ; X
(define elim-Pair
  (λ (A D X)
    (λ (p f)
      (f (car p) (cdr p)))))

;; eg
(check-same
 Nat 
 ((elim-Pair Nat Nat Nat)
  (cons 2 3) (lambda (a b) (+ a b)))
 5)

(check-same
 Nat 
 ((elim-Pair Nat Nat Nat) (cons 2 3) +)
 5)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Lists

(claim step-append
  (Π ((E U))
    (→ E (List E) (List E)
       (List E))))
    
(define step-append
  (λ (E)
    (λ (e es append-es)
      (:: e append-es))))

;; Append two lists
(claim  append
  (Π ((E U))
    (→ (List E) (List E)
       (List E))))
(define append
  (λ (E)
    (λ (start end)
      (rec-List start
        end
        (step-append E)))))

;;; pairs of lists 
(check-same
 (List Nat)
 ((elim-Pair
   (List Nat)
   (List Nat)
   (List Nat))
  (cons (:: 2 (:: 5 nil)) (:: 3 nil))
  (append Nat))
 (:: 2 (:: 5 (:: 3 nil))))


;; snoc appends an element at end of list
(claim  snoc
  (Π ((E U))
    (→ (List E) E
       (List E))))
(define snoc
  (λ (E)
    (λ (start e)
      (rec-List start
        (:: e nil)
        (step-append E)))))

(claim  step-reverse
  (Π ((E U))
    (→ E (List E) (List E)
       (List E))))
(define step-reverse
  (λ (E)
    (λ (e es reverse-es)
      (snoc E reverse-es e))))

(claim  reverse
  (Π ((E U))
    (→ (List E)
      (List E))))
(define reverse
  (λ (E)
    (λ (es)
      (rec-List es
        (the (List E) nil)   ; Pie can't infer this type on its own
        (step-reverse E)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; dependent types based on Vec E Nat

;;; safe head for vectors Vec E (add1 n)

(claim  first
  (Π ((E U)
      (l Nat))
    (-> (Vec E (add1 l))
      E)))

(define first
  (λ (E l)
    (λ (es)
      (head es))))

(claim rest
  (Π ((E U)
      (l Nat))
    (→ (Vec E (add1 l))
      (Vec E l))))

(define rest
  (λ (E l)
    (λ (es)
      (tail es))))

;; Can we write repeat n for a constant of type
;; using ind-Nat?

;; the ind-Nat motive is k : Nat → U (some type depending on k) but we
;; will need to paritally apply the type of the element E.
(claim  mot-repeat
  (→ U
    (→ Nat U)))

;; the motive is Nat -> Vec E Nat
(define mot-repeat
  (λ (E k)
    (Vec E k)))

;; at each step we take a (Vec E l-1) and produce a (Vec E l) but we
;; need to partially apply the type of element E and e:E itself in
;; order to construct the correct motive and cons the element onto the
;; larger vector.
(claim  step-repeat
  (Π ((E U)
      (e E)
      (l-1 Nat))
    (→ (mot-repeat E l-1)
      (mot-repeat E (add1 l-1)))))

(define step-repeat
  (λ (E e l-1)
    (λ (repeat-l-1)
      (vec:: e repeat-l-1))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Finally we can apply the required type E:U, element e:E and K:Nat
;; to ind-Nat motive and step functions. 
(claim repeat
  (Π ((E U)
      (e E)
      (k Nat))
    (Vec E k)))

(define repeat
  (λ (E e k)
    (ind-Nat k
      (mot-repeat E)  
      vecnil
      (step-repeat E e))))

;; Yay I'll be little typer yet!  We could pass in the type/value
;; constructor and unit to be fully generic...(Vec, vec::, vecnil)?

(claim repeat-with
  (Π ((E U)
      (e E)
      (f (→ E Nat E))
      (k Nat))
    (Vec E k)))

(claim step-repeat-with
  (Π ((E U)
      (e E)
      (f (-> E Nat E))
      (l-1 Nat))
    (→ (mot-repeat E l-1)
      (mot-repeat E (add1 l-1)))))

(define step-repeat-with
  (λ (E e f l-1)
    (λ (repeat-l-1)
      (vec:: (f e l-1) repeat-l-1))))

(define repeat-with
  (λ (E e f k)
    (ind-Nat k
      (mot-repeat E)  
      vecnil
      (step-repeat-with E e f))))


;;; last of a Vec using ind-Nat
(claim last
  (Π ((E U)
      (l Nat))
    (→ (Vec E (add1 l))
      E)))

;; here the base is a function
(claim base-last
  (Π ((E U))
    (→ (Vec E (add1 zero))
      E)))

(define base-last
  (λ (E)
    (λ (es)
      (head es))))

(claim mot-last
  (→ U Nat
     U))

(define mot-last
  (λ (E k)
    (→ (Vec E (add1 k))
      E)))

(claim step-last
  (Π ((E U)
      (l-1 Nat))
    (→ (mot-last E l-1)
      (mot-last E (add1 l-1)))))

(define step-last
  (λ (E l-1)
    (λ (last-l-1)
      (λ (es)
        (last-l-1 (tail es))))))

(define last
  (λ (E l)
    (ind-Nat l
      (mot-last E)
      (base-last E)
      (step-last E))))

;; drop the the last entry in a Vec

(claim drop-last
  (Π ((E U)
      (l Nat))
    (→ (Vec E (add1 l))
      (Vec E l))))

(claim base-drop-last
  (Π ((E U))
    (→ (Vec E (add1 zero))
      (Vec E zero))))

(define base-drop-last
  (λ (E)
    (λ (es)
      vecnil)))

(claim mot-drop-last
  (→ U Nat
     U))

(define mot-drop-last
  (λ (E k)
    (→ (Vec E (add1 k))
      (Vec E k))))

(claim step-drop-last
  (Π ((E U)
      (l-1 Nat))
    (→ (mot-drop-last E l-1)
      (mot-drop-last E (add1 l-1)))))

(define step-drop-last
  (λ (E l-1)
    (λ (drop-last-l-1)
      (λ (es)
        (vec::
         (head es)
         (drop-last-l-1 (tail es)))))))

(define drop-last
  (λ (E l)
    (ind-Nat l
      (mot-drop-last E)
      (base-drop-last E)
      (step-drop-last E))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; This Pie may contain Nats

;;; I had to have a suc function
(claim suc
  (-> Nat
    Nat))

(define suc
  (λ (n)
    (+ 1 n)))

;;; But we work with incr in what follows (from the text)
(claim incr
  (-> Nat
    Nat))

(define incr
  (λ (n)
    (iter-Nat n
      1
      (+ 1))))

;; So incr, (+ 1), suc and add1 are intensionally (defintionally and
;; judgementally?)  (sameness is a judgement) different funtions that
;; are extensionally the same... so we can propose that equality if we
;; have an equality type... which we do of course.

;; (= Nat 1 1) ; a type

;; of couse we are then obliged to construct a value/proof of this
;; type/proposition...
;; (the (= Nat 1 1) (same 1)) ; same is refl and is the only
                              ; constructor of the =-type

;; here we make the claim that (+ 1) == add1

(claim +1=add1
  (Π ((n Nat))
    (= Nat (+ 1 n) (add1 n))))

;; definitionally?
(define +1=add1
  (λ (n)
    (same (add1 n))))

;; also successor is equal to add1 

(claim suc=add1
  (Π ((n Nat))
    (= Nat (suc n) (add1 n))))

;; definitionally?
(define suc=add1
  (λ (n)
    (same (add1 n))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; We claim the following should also be true

(claim incr=add1
  (Π ((n Nat))
    (= Nat (incr n) (add1 n))))

;; but because (incr n)'s normal form is neutral (cannot yet be evaluated)
;; we have to work harder to provide an inductive proof...

(claim mot-incr=add1
  (→ Nat
    U))

(define mot-incr=add1
  (λ (k) 
    (= Nat (incr k) (add1 k))))

(claim base-incr=add1
  (= Nat (incr zero) (add1 zero)))

(define base-incr=add1
  (same (add1 zero)))

;; the implication here is that if (= Nat (incr n) (add1 n)) then
;; (= Nat (incr (add1 n)) (add1 (add1 n)))

(claim step-incr=add1
  (Π ((n-1 Nat))
    (→ (= Nat
          (incr n-1)
          (add1 n-1))
      (= Nat
         (add1
          (incr n-1))
         (add1
          (add1 n-1))))))

;; by congruence with (+ 1) we have a proof 
;; (define step-incr=add1
;;   (λ (n-1)
;;     (λ (incr=add1-n-1)
;;       (cong incr=add1-n-1 (+ 1)))))


;; TODO alternate using:  replace
(claim mot-step-incr=add1
  (→ Nat Nat
     U))

(define mot-step-incr=add1
  (λ (n-1 k)
    (= Nat
       (add1 (incr n-1))
       (add1 k))))

(define step-incr=add1
  (λ (n-1)
    (λ (incr=add1-n-1)
      (replace incr=add1-n-1
        (mot-step-incr=add1 n-1)
        (same (add1 (incr n-1)))))))

;; finally a proof that incr=add1

(define incr=add1
  (λ (n)
    (ind-Nat n
      mot-incr=add1
      base-incr=add1
      step-incr=add1)))


